#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:cl-online-learning :cl-store) :silent t))

(defpackage :ros.script.clol-predict
  (:use :cl :cl-online-learning :cl-online-learning.utils))
(in-package :ros.script.clol-predict)

;; Usage: clol-predict [options] test_file model_file output_file

(defmain (test-set-file model-file output-file)
  "Usage: clol-predict test-set-file model-file output-file"
  (let* ((learner (restore model-file))
         (multiclass-p (> (n-class-of learner) 2))
         (sparse-p (sparse-learner? learner))
         (test-set (progn
                     (format t "Loading dataset~%")
                     (read-data test-set-file (dim-of learner) :multiclass-p multiclass-p :sparse-p sparse-p)))
         (min/max-cls (class-min/max test-set)))
    ;; Set target to -1/1 (binary) or integer starting from 0 (multiclass)
    (when multiclass-p
      (loop for datum in test-set do
        (setf (car datum) (- (car datum) (car min/max-cls)))))
    ;; test
    (with-open-file (s output-file :direction :output :if-exists :supersede)
      (test learner test-set :stream s))))

;;; vim: set ft=lisp lisp:
